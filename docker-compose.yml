version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dalrn-postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-dalrn}
      POSTGRES_USER: ${DB_USER:-dalrn_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-dalrn_user} -d ${DB_NAME:-dalrn}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - dalrn-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: dalrn-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - dalrn-network

  # IPFS Node
  ipfs:
    image: ipfs/kubo:latest
    container_name: dalrn-ipfs
    environment:
      IPFS_PROFILE: server
      IPFS_PATH: /data/ipfs
    ports:
      - "${IPFS_API_PORT:-5001}:5001"  # API
      - "${IPFS_GATEWAY_PORT:-8080}:8080"  # Gateway
      - "4001:4001"  # P2P
    volumes:
      - ipfs_data:/data/ipfs
    healthcheck:
      test: ["CMD-SHELL", "ipfs dag stat /ipfs/QmUNLLsPACCz1vLxQVkXqqLX5R1X345qqfHbsf67hvA3Nn || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - dalrn-network

  # Ethereum Node (Local Development)
  anvil:
    image: ghcr.io/foundry-rs/foundry:latest
    container_name: dalrn-anvil
    command: anvil --host 0.0.0.0 --accounts 10 --balance 1000 --block-time 5 --chain-id 31337
    ports:
      - "${ANVIL_PORT:-8545}:8545"
    healthcheck:
      test: ["CMD-SHELL", "cast block-number --rpc-url http://localhost:8545 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - dalrn-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: dalrn-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - dalrn-network
    depends_on:
      - postgres
      - redis

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: dalrn-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: redis-datasource
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infra/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./infra/grafana/dashboards:/var/lib/grafana/dashboards:ro
    restart: unless-stopped
    networks:
      - dalrn-network
    depends_on:
      - prometheus

  # pgAdmin (Optional - Database Management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: dalrn-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@dalrn.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped
    networks:
      - dalrn-network
    depends_on:
      - postgres
    profiles:
      - tools

  # Redis Commander (Optional - Redis Management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: dalrn-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    restart: unless-stopped
    networks:
      - dalrn-network
    depends_on:
      - redis
    profiles:
      - tools

# Networks
networks:
  dalrn-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ipfs_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local