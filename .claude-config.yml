# Claude Code Configuration
# This file customizes how Claude analyzes and maintains your CLAUDE.md file

# Analysis configuration
analysis:
  # File patterns to exclude from analysis
  exclude_patterns:
    - "*.min.js"
    - "*.min.css"
    - "**/dist/**"
    - "**/build/**"
    - "**/vendor/**"
    - "**/node_modules/**"
    - "**/.git/**"
    - "**/__pycache__/**"
    - "**/.pytest_cache/**"
    - "**/venv/**"
    - "**/.venv/**"
    - "**/.env"
    - "**/*.pyc"
    - "**/*.pyo"
    - "**/*.egg-info/**"
    - "**/coverage/**"
    - "**/.coverage"
    - "**/htmlcov/**"
    
  # File patterns to include in analysis
  include_patterns:
    - "**/*.py"
    - "**/*.js"
    - "**/*.ts"
    - "**/*.jsx"
    - "**/*.tsx"
    - "**/*.java"
    - "**/*.go"
    - "**/*.rs"
    - "**/*.yml"
    - "**/*.yaml"
    - "**/*.json"
    - "**/*.sol"
    - "**/Dockerfile"
    - "**/docker-compose.yml"
    - "**/Makefile"
    - "**/*.proto"
    - "**/*.graphql"
    - "**/*.sql"
    
  # Maximum file size to analyze (in KB)
  max_file_size_kb: 500
  
  # Maximum number of files to analyze in detail
  max_files_to_analyze: 2000
  
  # Sampling strategy for large codebases
  sampling:
    enabled: true
    strategy: "stratified"  # random, stratified, or importance
    sample_size_per_type: 20  # Files per file type
    
  # Code metrics to track
  metrics:
    - complexity  # Cyclomatic complexity
    - loc        # Lines of code
    - comments   # Comment density
    - test_coverage  # If available
    - dependencies  # Dependency count

# CLAUDE.md configuration
claude_md:
  # Version prefix for semantic versioning
  version_prefix: "v"
  
  # Starting version if no existing CLAUDE.md
  initial_version: "1.0.0"
  
  # Required sections that must be present
  required_sections:
    - "PROJECT OVERVIEW"
    - "ARCHITECTURE"
    - "CORE COMPONENTS"
    - "API ENDPOINTS"
    - "DATA MODELS"
    - "KEY ALGORITHMS & BUSINESS LOGIC"
    - "DEPENDENCIES"
    - "CONFIGURATION"
    - "CURRENT STATE"
    - "ENTRY POINTS"
    
  # Optional sections based on project type
  optional_sections:
    - "TESTING STRATEGY"
    - "DEPLOYMENT"
    - "SECURITY CONSIDERATIONS"
    - "PERFORMANCE NOTES"
    - "CONTRIBUTING GUIDELINES"
    - "TROUBLESHOOTING"
    - "MIGRATION GUIDES"
    
  # Sections that should be preserved if manually edited
  preserve_manual_sections:
    - "CUSTOM NOTES"
    - "TEAM CONVENTIONS"
    - "HISTORICAL CONTEXT"
    
  # Maximum size for CLAUDE.md file (in KB)
  max_file_size_kb: 200
  
  # Include code examples in documentation
  include_examples: true
  
  # Maximum number of examples per section
  max_examples_per_section: 3

# Workflow configuration
workflow:
  # Whether to create draft PRs for manual review
  create_draft_pr: true
  
  # Auto-merge if all checks pass (requires branch protection)
  auto_merge: false
  
  # Reviewers to automatically assign
  auto_reviewers: []
  
  # Labels to add to PRs
  pr_labels:
    - "documentation"
    - "automated"
    - "claude-md"
    
  # Branch naming pattern
  branch_pattern: "claude-md-update-{run_number}"
  
  # Commit message template
  commit_template: |
    chore: Update CLAUDE.md via automated analysis
    
    - Analysis depth: {analysis_depth}
    - Focus areas: {focus_areas}
    - Version: {version}
    
    Auto-generated by Claude Code maintenance workflow
    
  # PR title template  
  pr_title_template: "ðŸ¤– Update CLAUDE.md - {version}"

# Notification settings
notifications:
  # Slack webhook URL (set as GitHub secret: SLACK_WEBHOOK_URL)
  slack:
    enabled: false
    channel: "#dev-notifications"
    mention_on_failure: "@channel"
    
  # Email notifications (requires email action setup)
  email:
    enabled: false
    recipients: []
    
  # GitHub issue creation
  issue:
    enabled: true
    assign_to_author: true
    labels:
      - "needs-review"
      - "documentation"

# Performance optimization
performance:
  # Use parallel processing for file analysis
  parallel_processing: true
  
  # Number of parallel workers
  max_workers: 4
  
  # Cache analysis results
  enable_cache: true
  
  # Cache TTL in days
  cache_ttl_days: 7
  
  # Skip analysis if changes are below threshold
  change_threshold_percent: 1

# Cost management
cost_management:
  # Maximum tokens per analysis run
  max_tokens: 100000
  
  # Estimated cost alert threshold (USD)
  cost_alert_threshold: 10.00
  
  # Abort if cost exceeds limit
  max_cost_limit: 25.00
  
  # Model preference for cost optimization
  preferred_model: "claude-sonnet-4-20250514"  # Balanced performance/cost

# Security and compliance
security:
  # Redact sensitive information
  redact_patterns:
    - "sk-[a-zA-Z0-9]+"  # API keys
    - "token[a-zA-Z0-9]+"  # Tokens
    - "[a-zA-Z0-9]{40}"  # SHA tokens
    - "password\\s*=\\s*['\"][^'\"]+['\"]"  # Passwords
    
  # Skip files containing sensitive data
  skip_sensitive_files:
    - "**/.env*"
    - "**/secrets.yml"
    - "**/credentials.json"
    
  # Compliance checks
  compliance:
    check_licenses: true
    allowed_licenses:
      - "MIT"
      - "Apache-2.0"
      - "BSD-3-Clause"
      - "ISC"

# Debug settings
debug:
  # Enable verbose logging
  verbose: false
  
  # Save intermediate analysis files
  save_intermediates: false
  
  # Output directory for debug files
  debug_output_dir: ".claude-debug"

# Custom rules for specific project types
project_specific:
  # Python projects
  python:
    style_guide: "PEP 8"
    docstring_style: "Google"  # Google, NumPy, or Sphinx
    type_checking: "strict"    # none, basic, or strict
    
  # JavaScript/TypeScript projects
  javascript:
    style_guide: "Airbnb"
    module_system: "ES6"  # CommonJS or ES6
    framework_conventions: true  # Follow framework-specific patterns
    
  # Go projects
  go:
    style_guide: "Effective Go"
    error_handling: "explicit"
    
  # Rust projects
  rust:
    style_guide: "Rust Style Guide"
    unsafe_usage: "documented"  # forbidden, documented, or allowed